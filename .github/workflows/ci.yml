name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      LC_ALL: C.UTF-8
      PYTHONHASHSEED: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install system tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Install project + tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"
          python -m pip install ruff mypy pytest-cov radon import-linter autoflake pyupgrade reorder-python-imports

      - name: Pre-commit (repo policy)
        run: pre-commit run --all-files

      - name: Black (format check)
        run: python -m black --check .

      - name: Ruff (lint)
        run: python -m ruff check .

      - name: Mypy (type check)
        run: mypy || true

      - name: Tests + Coverage
        run: |
          pytest -q --cov=autorepro --cov-report=term | tee /tmp/cov.txt
          echo "---- Coverage summary ----"
          grep -E "^TOTAL" /tmp/cov.txt || true

      - name: Duplication budget (jscpd <= 1%)
        run: |
          npx --yes jscpd@4.0.4 --min-lines 9 --pattern "autorepro/**/*.py" --reporters json --output /tmp/jscpd || true
          RATE=$(jq -r '.statistics.total.duplicatedRate // 0' /tmp/jscpd/jscpd-report.json 2>/dev/null || echo 0)
          echo "Duplicated rate: $RATE"
          RATE="$RATE" python - <<'PY'
          import os, sys
          try:
              rate = float(os.environ.get("RATE", "0") or 0)
          except Exception:
              rate = 0.0
          if rate > 0.01:
              print(f"::error::Duplicated rate {rate:.4f} > 0.01 (1%)")
              sys.exit(1)
          PY

      - name: Coverage floor (>= 80%)
        run: |
          PCT=$(grep -E "^TOTAL" /tmp/cov.txt | awk '{print $4}' | tr -d '%')
          echo "Coverage: ${PCT:-0}%"
          if [ "${PCT:-0}" -lt "80" ]; then
            echo "::error::Coverage ${PCT:-0}% < 80%"; exit 1; fi

      - name: Enforce module boundaries (import-linter)
        run: lint-imports

      - name: LOC per PR (<= 300 added)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
          # Calculate added lines, excluding deletions and modifications
          ADDED=$(git diff --diff-filter=A --numstat origin/${{ github.base_ref }}... | awk '{s+=$1} END {print s+0}')
          echo "Added lines: $ADDED"
          if [ "${ADDED:-0}" -gt "300" ]; then
            echo "::error::PR adds $ADDED LOC (>300). Split it."; exit 1; fi

      - name: Golden drift check
        run: |
          python scripts/regold.py --write
          git diff --exit-code

      - name: Verify CLI functionality
        run: |
          autorepro --help
          autorepro --version

      - name: Build report artifact
        continue-on-error: true
        run: |
          autorepro report --desc "CI repro bundle" --exec --timeout 60 --out autorepro_report.zip

      - name: Collect reports
        if: always()
        run: |
          cp /tmp/cov.txt coverage.txt 2>/dev/null || true
          if [ -d /tmp/jscpd ]; then
            cp -r /tmp/jscpd jscpd-report || true
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            autorepro_report.zip
            coverage.txt
            jscpd-report/
          if-no-files-found: ignore
