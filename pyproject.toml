[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autorepro"
version = "0.0.1"
description = "AutoRepro turns an Issue into clear repro steps and a shareable workspace"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "Apache-2.0"}
authors = [
    {name = "Ali Nazzal", email = "ali90h7@pm.me"}
]
maintainers = [
    {name = "Ali Nazzal", email = "ali90h7@pm.me"}
]
keywords = ["developer-tools", "reproduction", "devcontainer", "automation", "testing", "ci-cd"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Tools",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Typing :: Typed"
]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "ruff>=0.5.0",
    "pre-commit>=3.7.0"
]

[project.scripts]
autorepro = "autorepro.cli:main"

[project.urls]
Homepage = "https://github.com/ali90h/AutoRepro"
Repository = "https://github.com/ali90h/AutoRepro.git"
Issues = "https://github.com/ali90h/AutoRepro/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["autorepro*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short"
]
markers = [
    "smoke: CLI smoke tests for basic functionality",
    "timeout: tests with timeout requirements",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "PLR", # pylint refactor
    "C901", # complex-structure
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print (no print statements)
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
# Black controls line length; ruff will enforce other quality rules
ignore = [
    "E501",   # line-too-long (handled by black)
    "S101",   # assert (allow in tests)
    "T201",   # print (allow for CLI output)
    "S603",   # subprocess-without-shell-equals-true
    "S607",   # start-process-with-partial-path
]
# CI BARRIER: All other quality rules are enforced as errors - no violations allowed

[tool.ruff.lint.pylint]
# Size and complexity limits to prevent regression - CI BARRIERS
max-args = 8            # PLR0913: too-many-arguments (stricter limit)
max-branches = 12       # PLR0912: too-many-branches (stricter limit)
max-returns = 6         # PLR0911: too-many-return-statements (stricter limit)
max-statements = 50     # PLR0915: too-many-statements (stricter limit)

[tool.ruff.lint.mccabe]
# Cyclomatic complexity limit - CI BARRIER
max-complexity = 12     # C901: complex-structure (stricter limit for CI)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.docformatter]
wrap-summaries = 88
wrap-descriptions = 88
pre-summary-newline = true

[tool.coverage.run]
branch = true
source = ["autorepro"]
omit = [
"autorepro/__main__.py",
"autorepro/render/*",
"tests/*",
]

[tool.coverage.report]
exclude_lines = [
"if __name__ == .__main__.:",
"pragma: no cover",
"raise NotImplementedError",
]
