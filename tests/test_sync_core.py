"""Unit tests for autorepro.sync module core functions."""

import json

import pytest

from autorepro.sync import (
    ReportMeta,
    build_cross_reference_links,
    find_autorepro_content,
    find_synced_block,
    render_sync_comment,
    replace_synced_block,
)


class TestSyncBlockHandling:
    """Test sync block detection and replacement."""

    def test_find_synced_block_exists(self):
        """Test finding existing sync block."""
        comment_text = """Some content before

<!-- autorepro:begin plan schema=1 -->
# Plan Content
Some plan here
<!-- autorepro:end plan -->

Some content after"""

        result = find_synced_block(comment_text)
        assert result is not None
        start_idx, end_idx = result
        assert comment_text[start_idx:end_idx].startswith("<!-- autorepro:begin")
        assert comment_text[start_idx:end_idx].endswith("<!-- autorepro:end plan -->")

    def test_find_synced_block_not_exists(self):
        """Test when sync block doesn't exist."""
        comment_text = "Just regular comment text"
        result = find_synced_block(comment_text)
        assert result is None

    def test_find_synced_block_incomplete(self):
        """Test when sync block is incomplete."""
        comment_text = """<!-- autorepro:begin plan schema=1 -->
Some content but no end tag"""
        result = find_synced_block(comment_text)
        assert result is None

    def test_replace_synced_block_existing(self):
        """Test replacing existing sync block."""
        existing_text = """Header content

<!-- autorepro:begin plan schema=1 -->
Old plan content
<!-- autorepro:end plan -->

Footer content"""

        new_plan = "# New Plan\nUpdated content"
        result = replace_synced_block(existing_text, new_plan)

        assert "Header content" in result
        assert "Footer content" in result
        assert "Old plan content" not in result
        assert "# New Plan" in result
        assert "Updated content" in result

    def test_replace_synced_block_no_existing(self):
        """Test adding sync block when none exists."""
        existing_text = "Just regular comment content"
        new_plan = "# New Plan\nNew content"

        result = replace_synced_block(existing_text, new_plan)

        assert "Just regular comment content" in result
        assert "<!-- autorepro:begin plan schema=1 -->" in result
        assert "# New Plan" in result
        assert "<!-- autorepro:end plan -->" in result


class TestSyncCommentRendering:
    """Test sync comment rendering functions."""

    def test_render_sync_comment_issue_basic(self):
        """Test basic issue comment rendering with markdown plan."""
        plan_content = "# Test Plan\n\nSome plan content"

        result = render_sync_comment(plan_content, "md", "issue")

        assert "## Test Plan" in result
        assert "**Summary**: AutoRepro plan generated from issue description" in result
        assert "<!-- autorepro:begin plan schema=1 -->" in result
        assert "Some plan content" in result
        assert "<!-- autorepro:end plan -->" in result
        assert "Generated by [AutoRepro]" in result

    def test_render_sync_comment_pr_basic(self):
        """Test basic PR comment rendering with markdown plan."""
        plan_content = "# Test Plan\n\nSome plan content"

        result = render_sync_comment(plan_content, "md", "pr")

        assert "## ðŸ”„ Test Plan" in result
        assert "**Summary**: AutoRepro reproduction plan for this PR" in result
        assert "<!-- autorepro:begin plan schema=1 -->" in result
        assert "Some plan content" in result

    def test_render_sync_comment_with_json(self):
        """Test comment rendering with JSON plan."""
        plan_data = {"title": "JSON Test Plan", "commands": []}
        plan_content = json.dumps(plan_data, indent=2)

        result = render_sync_comment(plan_content, "json", "issue")

        assert "## JSON Test Plan" in result
        assert "<!-- autorepro:begin plan schema=1 -->" in result
        assert '"title": "JSON Test Plan"' in result

    def test_render_sync_comment_with_links(self):
        """Test comment rendering with cross-reference links."""
        plan_content = "# Test Plan\n\nContent"
        links = ["Relates to #123", "Relates to #456"]

        result = render_sync_comment(plan_content, "md", "issue", links=links)

        assert "**Related**:" in result
        assert "- Relates to #123" in result
        assert "- Relates to #456" in result

    def test_render_sync_comment_with_report(self):
        """Test comment rendering with report attachment."""
        plan_content = "# Test Plan\n\nContent"
        report_meta = ReportMeta("test_bundle.zip", 1024, "/tmp/test_bundle.zip")

        result = render_sync_comment(plan_content, "md", "pr", attach_report=report_meta)

        assert "**Report Bundle**:" in result
        assert "- File: `test_bundle.zip`" in result
        assert "- Size: 1,024 bytes" in result
        assert "- Path: `/tmp/test_bundle.zip`" in result

    def test_render_sync_comment_with_summary(self):
        """Test PR comment rendering with summary context."""
        plan_content = "# Test Plan\n\nContent"

        result = render_sync_comment(
            plan_content, "md", "pr", summary="Jest tests are failing in CI"
        )

        assert "**Context**: Jest tests are failing in CI" in result

    def test_render_sync_comment_with_details_long_content(self):
        """Test comment rendering with long content wrapped in details."""
        # Create long content
        long_content = "# Test Plan\n\n" + "\n".join([f"- Line {i}" for i in range(20)])

        result = render_sync_comment(long_content, "md", "pr", use_details=True)

        assert "<details>" in result
        assert "<summary>ðŸ“‹ Reproduction Plan (click to expand)</summary>" in result
        assert "</details>" in result

    def test_render_sync_comment_no_details_when_disabled(self):
        """Test comment rendering with details disabled."""
        # Create long content
        long_content = "# Test Plan\n\n" + "\n".join([f"- Line {i}" for i in range(20)])

        result = render_sync_comment(long_content, "md", "pr", use_details=False)

        assert "<details>" not in result
        assert "<summary>" not in result

    def test_render_sync_comment_invalid_json(self):
        """Test comment rendering with invalid JSON plan."""
        plan_content = "{invalid json"

        result = render_sync_comment(plan_content, "json", "issue")

        assert "## Issue Reproduction Plan" in result  # Fallback title


class TestCrossReferenceLinks:
    """Test cross-reference link building."""

    def test_build_cross_reference_links_pr_to_issue(self):
        """Test building PR to issue cross-reference links."""
        links = build_cross_reference_links("pr", link_issue=123)

        assert links == ["Relates to #123"]

    def test_build_cross_reference_links_issue_to_pr(self):
        """Test building issue to PR cross-reference links."""
        links = build_cross_reference_links("issue", link_pr=456)

        assert links == ["Relates to #456"]

    def test_build_cross_reference_links_empty(self):
        """Test building empty cross-reference links."""
        links = build_cross_reference_links("pr")

        assert links == []

    def test_build_cross_reference_links_wrong_context(self):
        """Test building links with wrong context (should be empty)."""
        # PR context but providing link_pr (should be link_issue)
        links = build_cross_reference_links("pr", link_pr=123)

        assert links == []

        # Issue context but providing link_issue (should be link_pr)
        links = build_cross_reference_links("issue", link_issue=456)

        assert links == []


class TestContentDetection:
    """Test autorepro content detection."""

    def test_find_autorepro_content_exists(self):
        """Test finding existing autorepro content."""
        content_list = [
            {"id": 1, "body": "Regular comment"},
            {
                "id": 2,
                "body": "<!-- autorepro:begin plan schema=1 -->\nPlan\n<!-- autorepro:end plan -->",
            },
            {"id": 3, "body": "Another regular comment"},
        ]

        result = find_autorepro_content(content_list)

        assert result is not None
        assert result["id"] == 2

    def test_find_autorepro_content_not_exists(self):
        """Test when no autorepro content exists."""
        content_list = [
            {"id": 1, "body": "Regular comment"},
            {"id": 2, "body": "Another regular comment"},
        ]

        result = find_autorepro_content(content_list)

        assert result is None

    def test_find_autorepro_content_empty_list(self):
        """Test with empty content list."""
        content_list = []

        result = find_autorepro_content(content_list)

        assert result is None


class TestReportMeta:
    """Test ReportMeta namedtuple."""

    def test_report_meta_creation(self):
        """Test creating ReportMeta instance."""
        meta = ReportMeta("test.zip", 2048, "/path/to/test.zip")

        assert meta.filename == "test.zip"
        assert meta.size_bytes == 2048
        assert meta.path == "/path/to/test.zip"

    def test_report_meta_fields(self):
        """Test ReportMeta field access."""
        meta = ReportMeta(filename="bundle.zip", size_bytes=1024, path="/tmp/bundle.zip")

        assert hasattr(meta, "filename")
        assert hasattr(meta, "size_bytes")
        assert hasattr(meta, "path")

    def test_report_meta_immutable(self):
        """Test ReportMeta is immutable."""
        meta = ReportMeta("test.zip", 1024, "/tmp/test.zip")

        # NamedTuple should be immutable
        with pytest.raises(AttributeError):
            meta.filename = "new.zip"


class TestTitleExtraction:
    """Test title extraction from different content types."""

    def test_extract_title_from_markdown(self):
        """Test extracting title from markdown content."""
        plan_content = "# Custom Plan Title\n\nSome content here"
        result = render_sync_comment(plan_content, "md", "issue")

        assert "## Custom Plan Title" in result

    def test_extract_title_from_json_valid(self):
        """Test extracting title from valid JSON content."""
        plan_data = {"title": "Custom JSON Title", "commands": []}
        plan_content = json.dumps(plan_data)
        result = render_sync_comment(plan_content, "json", "issue")

        assert "## Custom JSON Title" in result

    def test_extract_title_from_json_missing_title(self):
        """Test extracting title from JSON without title field."""
        plan_data = {"commands": []}
        plan_content = json.dumps(plan_data)
        result = render_sync_comment(plan_content, "json", "issue")

        assert "## Issue Reproduction Plan" in result

    def test_extract_title_no_markdown_heading(self):
        """Test extracting title from markdown without heading."""
        plan_content = "Just some content without a heading"
        result = render_sync_comment(plan_content, "md", "issue")

        assert "## Issue Reproduction Plan" in result
